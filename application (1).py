# -*- coding: utf-8 -*-
"""application.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sINOyQ_MYINPakmI131jjEH6dBY-Qz-n
"""

# ---- app.py ----
import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

st.title("ðŸ›’ Meat Product Classifier (Lightweight Version)")
st.write("Upload your Training File (100% correct file), Input File, and Rules File.")

# Upload Files
train_file = st.file_uploader("Upload Training File", type=["xlsx"])
input_file = st.file_uploader("Upload Input File", type=["xlsx"])
rules_file = st.file_uploader("Upload Rules File", type=["xlsx"])

if train_file and input_file and rules_file:
    # Read Excel files
    train_df = pd.read_excel(train_file)
    input_df = pd.read_excel(input_file)
    rules_df = pd.read_excel(rules_file)

    # Preprocessing
    train_df['Best Received External Description'] = train_df['Best Received External Description'].astype(str).str.upper()
    train_df['Consolidated nan descript'] = train_df['Consolidated nan descript'].astype(str).str.upper()
    input_df['Best Received External Description'] = input_df['Best Received External Description'].astype(str).str.upper()
    rules_df['Exclude Retailer description'] = rules_df['Exclude Retailer description'].astype(str).str.upper()

    # Train TF-IDF model
    tfidf_vectorizer = TfidfVectorizer()
    tfidf_matrix = tfidf_vectorizer.fit_transform(train_df['Best Received External Description'])

    # Prediction function
    def predict(desc):
        desc_vector = tfidf_vectorizer.transform([desc])
        cosine_similarities = cosine_similarity(desc_vector, tfidf_matrix)
        best_match_idx = cosine_similarities.argmax()
        best_score = cosine_similarities[0, best_match_idx]
        predicted_label = train_df.iloc[best_match_idx]['Consolidated nan descript']
        return predicted_label, best_score

    # Apply prediction
    results = []
    exclude_keywords = rules_df['Exclude Retailer description'].dropna().tolist()

    for idx, row in input_df.iterrows():
        desc = row['Best Received External Description']

        # Exclude Check
        if any(keyword in desc for keyword in exclude_keywords):
            results.append({'Best Received External Description': desc, 'Prediction': 'Exclude', 'Accuracy': 1.0})
        else:
            pred_label, confidence = predict(desc)
            results.append({
                'Best Received External Description': desc,
                'Prediction': pred_label,
                'Accuracy': round(confidence, 2)
            })

    # Show results
    result_df = pd.DataFrame(results)
    st.success("âœ… Prediction completed!")
    st.dataframe(result_df)

    # Download
    st.download_button(
        label="Download Output CSV",
        data=result_df.to_csv(index=False),
        file_name='predicted_meat_output.csv',
        mime='text/csv'
    )